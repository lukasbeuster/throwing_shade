{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "import rasterio\n",
    "from rasterio.merge import merge\n",
    "from rasterstats import zonal_stats\n",
    "import numpy as np\n",
    "import os\n",
    "import argparse\n",
    "\n",
    "import datetime as dt\n",
    "\n",
    "def main(osmid, date):\n",
    "    print(f'working on OSMID:{osmid}')\n",
    "    timestr = date.strftime(\"%Y%m%d\")\n",
    "    timestr_extension = timestr + '.tif'\n",
    "\n",
    "\n",
    "    # Load polygon dataset\n",
    "    #TODO: change file extension, move to server. \n",
    "    polygons = gpd.read_file('/Users/lbeuster/Documents/TU Delft/Projects/Land_Surface_Temperature/data/raw_data/AMS/verhardingen/Q1_20230126_ingekort.gpkg')\n",
    "\n",
    "    root_directory = f\"../results/output/{osmid}\"\n",
    "    raster_files = find_raster_files(root_directory, timestr_extension)\n",
    "    \n",
    "    mosaic, out_trans, out_meta = merge_rasters_with_mask(raster_files)\n",
    "\n",
    "    # Update metadata for the virtual raster\n",
    "    out_meta.update({\n",
    "        \"driver\": \"GTiff\",\n",
    "        \"height\": mosaic.shape[1],\n",
    "        \"width\": mosaic.shape[2],\n",
    "        \"transform\": out_trans\n",
    "    })\n",
    "\n",
    "    # Assuming 'mosaic' is your merged raster data\n",
    "    stats = compute_zonal_stats(polygons, mosaic[0], affine=out_trans, nodata_value=nodata_value)\n",
    "\n",
    "\n",
    "    # Add statistics to polygon dataset\n",
    "    for stat_type in ['mean', 'std', 'min', 'max']:\n",
    "        polygons[f'{timestr}_{stat_type}'] = [s[stat_type] for s in stats]\n",
    "\n",
    "    # # Save updated polygon dataset\n",
    "    # polygons.to_file(\"path/to/output/polygons_with_stats.shp\")\n",
    "\n",
    "\n",
    "def find_raster_files(root_dir, file_extension='20240620.tif'):\n",
    "    raster_files = []\n",
    "    for root, dirs, files in os.walk(root_dir):\n",
    "        for file in files:\n",
    "            if file.endswith(file_extension):\n",
    "                raster_files.append(os.path.join(root, file))\n",
    "    return raster_files\n",
    "\n",
    "def merge_rasters_with_mask(raster_files):\n",
    "    src_files_to_mosaic = []\n",
    "    for raster in raster_files:\n",
    "        with rasterio.open(raster) as src:\n",
    "            data = src.read(1)\n",
    "            mask = data != src.nodata\n",
    "            src_files_to_mosaic.append({'data': data, 'mask': mask, 'meta': src.meta})\n",
    "    \n",
    "    # Merge data and masks\n",
    "    merged_data, out_trans = merge([{'data': src['data'], 'transform': src['meta']['transform']} for src in src_files_to_mosaic])\n",
    "    merged_mask, _ = merge([{'data': src['mask'], 'transform': src['meta']['transform']} for src in src_files_to_mosaic])\n",
    "    \n",
    "    # Apply mask to merged data\n",
    "    merged_data = np.ma.masked_array(merged_data, mask=~merged_mask)\n",
    "    \n",
    "    return merged_data, out_trans, src_files_to_mosaic[0]['meta']\n",
    "\n",
    "def compute_zonal_stats(polygons, raster_data, affine, nodata_value=None):\n",
    "    stats = zonal_stats(polygons, raster_data, affine=affine, stats=['mean', 'std', 'min', 'max'], nodata=nodata_value)\n",
    "    return stats\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\n",
    "    # Initialize the parser\n",
    "    parser = argparse.ArgumentParser(description=\"Process a OSM area.\")\n",
    "    \n",
    "    # Add the argument\n",
    "    parser.add_argument('number', type=int, help='OSMID to be processed')\n",
    "\n",
    "    # Add the date argument\n",
    "    parser.add_argument('date', type=str, help='Date to be processed in YYYY-MM-DD format')\n",
    "\n",
    "    # Parse the arguments\n",
    "    args = parser.parse_args()\n",
    "\n",
    "    # Access the number argument\n",
    "    osmid = args.number\n",
    "\n",
    "    date_input = args.date\n",
    "\n",
    "    # Convert the date string to a datetime object\n",
    "    date = dt.datetime.strptime(date_input, \"%Y-%m-%d\")\n",
    "\n",
    "    main(osmid,date)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "throwing_shade",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
